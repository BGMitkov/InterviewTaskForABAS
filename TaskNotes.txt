Прочетох документацията за XML manipulation in Java от уебсайта docs.oracle.
Извличам аргументите от main метода които се подават от command line и ги подавам на статично дефиниран метод на програмата.
Методът проверява дали файлът който е подаден е наистина .xml файл. Ако не е хвърля InputMismacthException.


От страницата разбирам, че съществуват 3 начина за четене на XML файл.
Първият е чрез използване на клас представящ XML файлът като DOM структура във памет. 
	Недостатък на този начин е, че използва много памет за зареждане на целия XML файл наведнъж, което за server-side приложение е голям недостатък поради обработването на множество заявки.
Вторият начин, е използването на SAX(Simple API for XML). Не използва голямо количество памет за зареждане на целия файл, но има не толкова прост интерфейс.
Третият начин използва StAX. Изглежда с по-опростен интерфейс и не използва голямо количество памет.

Избирам да използвам StAX.
StAX предоставя stream, който дава обекти като XMLEvent.
Проверявам тъй като ни интересуват елементи със tag подаден в параметрите на програмата, проверявам дали обектът е от тип стартов елемент т.е.
Ако обектът е стартов елемент, му взимаме презентацията като стартов елемент чрез класа StartElement.
Където можем да проверим дали тагът подаден като параметър съвпада със името текущия елемент.
Когато получим съвпадение с подадените параметрите записваме резултата в StringBuilder и накрая го принтираме на стандартния изход.

Програмата стига до елемент без атрибут и не знае как да продължи.

След бързо рефакториране кодът работи за първата задача.

За да работи кодът за втората задача трябваше да го рефакторирам като добавя колекция която да държи имената на атрибутите и съотвестващите им стойности.
За константно време на работа избрах Map<String, Set<String>> като ползвам HashSet<> за стойност тъй като е възможно множество атрибути с еднакви имена, но с различна стойност да се подават.

Алгоритъмът работи като следи за три случая на класа XMLEvent, като под XMLEvent се има предвид достигане до таг на елемент, до стойността оградена от отварящ и затварящ таг, и за затварящия таг.
Като открие отварящ таг, проверява дали този таг е търсеният. 
След това за всеки срещнат атрибут на тага проверява дали е от значение, т.е. дали го е имало в заявката.
При първия срещнат атрибут който отговаря на условието, се записва името на атрибута и се преминава на следващия XMLEvent, който задължително трябва да е от тип Characters и чията стойност записваме в отговора.
След това отриваме затварящия таг, където приключваме със текущия запис и подготвяме за намирането на следващия.
